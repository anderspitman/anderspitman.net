#!/bin/env node

const process = require('process');
const fs = require('fs');
const path = require('path');
const marked = require('./deps/marked/lib/marked.js');
const mustache = require('./deps/mustache.js/mustache.js');

if (process.argv.length < 6) {
  console.log("Usage: curly-jefferson entryDir outDir host root");
  process.exit(1);
}

const entryDir = process.argv[2];
const outDir = process.argv[3];
const host = process.argv[4];
const root = process.argv[5];

try {
  fs.readdirSync(outDir);
}
catch (e) {
  fs.mkdirSync(outDir);
}

// this is used to achieve a "natural sort". see
// https://stackoverflow.com/a/38641281/943814
const naturalSorter = new Intl.Collator(undefined, {
  numeric: true,
  sensitivity: 'base'
});

const aboutTemplateText = fs.readFileSync('about.mustache', 'utf8');
const headerTemplateText = fs.readFileSync('header.mustache', 'utf8');
const footerTemplateText = fs.readFileSync('footer.mustache', 'utf8');
const entryTemplateText = fs.readFileSync('entry.mustache', 'utf8');

const items = fs.readdirSync(entryDir, { withFileTypes: true });

const entries = [];
for (const item of items) {
  const itemPath = path.join(entryDir, item.name);

  const mdPath = path.join(itemPath, 'remfs.json');
  const metadata = JSON.parse(fs.readFileSync(mdPath, 'utf8'));

  const entryPath = path.join(itemPath, metadata.ext.contentFilename);
  const entryText = fs.readFileSync(entryPath, 'utf8');

  let content;
  if (entryText.length < 1024) {
    content = marked(entryText);
  }
  else {
    content = '';
  }
  const entry = {
    metadata: metadata.ext,
    content,
  };
  entries.push(entry);

  genEntryPage(entry, marked(entryText));

}

genIndexPage();
genFeedPage(entries);
genAboutPage();


function genIndexPage() {
  const indexPath = path.join(outDir, 'index.html');
  const partials = {
    header: headerTemplateText,
    footer: footerTemplateText,
  };
  const rendered = mustache.render(aboutTemplateText, {
    root,
  }, partials);
  fs.writeFileSync(indexPath, rendered);
  remfsSetWebDir(outDir);
}

function genAboutPage() {
  const aboutDir = path.join(outDir, 'about');
  ensureDir(aboutDir);
  const aboutPath = path.join(aboutDir, 'index.html');
  const partials = {
    header: headerTemplateText,
    footer: footerTemplateText,
  };
  const rendered = mustache.render(aboutTemplateText, {
    root,
  }, partials);
  fs.writeFileSync(aboutPath, rendered);
  remfsSetWebDir(aboutDir);
}

function genFeedPage(entries) {

  // sort in reverse-chronological order (the key is the entry id, which
  // increases monotonically).
  const sortedEntries = entries.slice()
    .sort((a, b) => naturalSorter.compare(a.metadata.entryId, b.metadata.entryId))
    .reverse();

  const feedTemplateText = fs.readFileSync('feed.mustache', 'utf8');
  const partials = {
    header: headerTemplateText,
    footer: footerTemplateText,
    entry: entryTemplateText,
  };
  const rendered = mustache.render(feedTemplateText, {
    root,
    posts: sortedEntries,
  }, partials);
  ensureDir('feed');
  fs.writeFileSync(path.join('feed', 'index.html'), rendered);
  remfsSetWebDir('feed');
}

function genEntryPage(entry, fullContent) {
  const entryIndexTemplateText = fs.readFileSync('entry_index.mustache', 'utf8');
  const partials = {
    header: headerTemplateText,
    footer: footerTemplateText,
    entry: entryTemplateText,
  };
  const rendered = mustache.render(entryIndexTemplateText, {
    root,
    metadata: entry.metadata,
    content: fullContent,
  }, partials);
  const entryDir = String(entry.metadata.entryId);
  ensureDir(entryDir);
  fs.writeFileSync(path.join(entryDir, 'index.html'), rendered);
  remfsSetWebDir(entryDir);
}

function ensureDir(dirPath) {
  try {
    fs.readdirSync(dirPath);
  }
  catch (e) {
    fs.mkdirSync(dirPath);
  }
}

function remfsSetWebDir(dir) {
  const remfsSettings = {
    ext: {
      http: {
        isWebDir: true,
      },
    }
  };

  const remfsSettingsPath = path.join(dir, 'remfs.json');
  fs.writeFileSync(remfsSettingsPath, JSON.stringify(remfsSettings, null, 2));
}
